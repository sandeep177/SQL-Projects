CREATE SCHEMA dannys_diner;

CREATE TABLE dannys_diner.sales (
  customer_id VARCHAR(1),
  order_date DATE,
  product_id INTEGER
);

INSERT INTO dannys_diner.sales
  (customer_id, order_date, product_id)
VALUES
  ('A', '2021-01-01', '1'),
  ('A', '2021-01-01', '2'),
  ('A', '2021-01-07', '2'),
  ('A', '2021-01-10', '3'),
  ('A', '2021-01-11', '3'),
  ('A', '2021-01-11', '3'),
  ('B', '2021-01-01', '2'),
  ('B', '2021-01-02', '2'),
  ('B', '2021-01-04', '1'),
  ('B', '2021-01-11', '1'),
  ('B', '2021-01-16', '3'),
  ('B', '2021-02-01', '3'),
  ('C', '2021-01-01', '3'),
  ('C', '2021-01-01', '3'),
  ('C', '2021-01-07', '3');
 

CREATE TABLE dannys_diner.menu (
  product_id INTEGER,
  product_name VARCHAR(5),
  price INTEGER
);

INSERT INTO dannys_diner.menu
  (product_id, product_name, price)
VALUES
  ('1', 'sushi', '10'),
  ('2', 'curry', '15'),
  ('3', 'ramen', '12');
  

CREATE TABLE dannys_diner.members (
  customer_id VARCHAR(1),
  join_date DATE
);

INSERT INTO dannys_diner.members
  (customer_id, join_date)
VALUES
  ('A', '2021-01-07'),
  ('B', '2021-01-09');
  
select*
from sales;

select*
from menu;

select*
from members;

# What is the total amount each customer spent at the restaurant?

SELECT 
  s.customer_id, 
  SUM(m.price) AS total_sales
FROM sales AS s
JOIN menu AS m
  ON s.product_id = m.product_id
GROUP BY s.customer_id;

# How many days has each customer visited the restaurant?

SELECT 
   customer_id,
   COUNT(DISTINCT order_date) AS visit_days
FROM sales
GROUP BY customer_id;

# What was the first item from the menu purchased by each customer?

WITH
 first_purchase AS (
 SELECT
   s.customer_id,
   s.order_date,
   m.product_name,
   RANK() OVER (PARTITION BY s.customer_id ORDER BY s.order_date) AS rnk
 FROM sales as s
 JOIN menu as m
 ON s.product_id = m.product_id
)
SELECT 
  customer_id,
  product_name
FROM first_purchase
WHERE rnk = 1
GROUP BY customer_id, product_name;

# What is the most purchased item on the menu and how many times was it purchased by all customers?

SELECT
  m.product_name,
  COUNT(*) AS times_purchased
FROM sales as s
JOIN menu as m
  ON s.product_id = m.product_id
GROUP BY m.product_name
ORDER BY times_purchased DESC 
LIMIT 1;

# Which item was the most popular for each customer?

WITH item_counts AS (
 SELECT
   s.customer_id,
   m.product_name,
   COUNT(*) AS item_count,
   RANK() OVER (PARTITION BY s.customer_id ORDER BY COUNT(*) DESC) AS rnk
 FROM sales as s
 JOIN menu as m
 ON s.product_id = m.product_id
 GROUP BY s.customer_id, m.product_name
)
SELECT 
  customer_id,
  product_name,
  item_count
FROM item_counts
WHERE rnk = 1 ;

# Which item was purchased first by the customer after they became a member?

WITH joined_sales AS (
  SELECT 
    s.customer_id, s.order_date, s.product_id, m.join_date,
   RANK() OVER (PARTITION BY s.customer_id ORDER BY s.order_date) AS rnk
  FROM sales AS s
  JOIN members AS m
    ON s.customer_id = m.customer_id
  WHERE s.order_date >= m.join_date
)
SELECT
  js.customer_id,
  m2.product_name,
  js.order_date
FROM joined_sales as js
JOIN menu as m2
  ON js.product_id = m2.product_id
WHERE js.rnk = 1
GROUP BY js.customer_id, m2.product_name, js.order_date;

# Which item was purchased just before the customer became a member?

WITH before_becoming_member AS (
   SELECT s.customer_id, s.order_date, s.product_id, m.join_date,
      RANK() OVER (PARTITION BY s.customer_id ORDER BY s.order_date DESC) AS rnk
	FROM sales as s
    JOIN members as m
      ON s.customer_id = m.customer_id
	WHERE s.order_date < m.join_date
)
SELECT 
  bm.customer_id,
  m2.product_name,
  bm.order_date
FROM before_becoming_member as bm
jOIN menu as m2
  ON bm.product_id = m2.product_id
WHERE bm.rnk = 1
GROUP BY bm.customer_id, m2.product_name, bm.order_date;

#  What is the total items and amount spent for each member before they became a member?

SELECT  s.customer_id,
  COUNT(*) AS total_items,
  SUM(m.price) AS total_amount
FROM sales as s
JOIN menu as m
  ON s.product_id = m.product_id
JOIN members as mb
  ON s.customer_id = mb.customer_id
WHERE s.order_date < mb.join_date
GROUP BY s.customer_id;

# If each $1 spent equates to 10 points and sushi has a 2x points multiplier â€” how many points would each customer have?

SELECT
s.customer_id,
SUM(
CASE
WHEN s.order_date BETWEEN m.join_date AND DATE_ADD(m.join_date, INTERVAL 6 DAY)
THEN menu.price * 10 * 2
ELSE menu.price * 10
END
) AS total_points
FROM sales s
JOIN menu ON s.product_id = menu.product_id
JOIN members m ON s.customer_id = m.customer_id
WHERE s.customer_id IN ('A', 'B')
GROUP BY s.customer_id;

